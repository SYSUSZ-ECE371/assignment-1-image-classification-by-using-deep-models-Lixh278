2025/05/14 09:40:05 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.20 (default, Oct  3 2024, 15:24:27) [GCC 11.2.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 153305936
    GPU 0,1: NVIDIA GeForce RTX 4090
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 12.2, V12.2.91
    GCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
    PyTorch: 1.10.1
    PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

    TorchVision: 0.11.2
    OpenCV: 4.11.0
    MMEngine: 0.10.7

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 153305936
    deterministic: False
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/14 09:40:05 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=256)
data_preprocessor = dict(
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    num_classes=1000,
    std=[
        58.395,
        57.12,
        57.375,
    ],
    to_rgb=True)
data_root = '../data/'
dataset_type = 'ImageNet'
default_hooks = dict(
    checkpoint=dict(
        interval=-1,
        max_keep_ckpts=1,
        rule='greater',
        save_best='accuracy/top1',
        save_last=False,
        type='CheckpointHook'),
    logger=dict(interval=100, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(enable=False, type='VisualizationHook'))
default_scope = 'mmcls'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = '../models/resnet50_8xb32_in1k_20210831-ea4938fc.pth'
log_level = 'INFO'
model = dict(
    backbone=dict(
        depth=50,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch',
        type='ResNet'),
    head=dict(
        in_channels=2048,
        loss=dict(loss_weight=1.0, type='CrossEntropyLoss'),
        num_classes=5,
        topk=(
            1,
            5,
        ),
        type='LinearClsHead'),
    neck=dict(type='GlobalAveragePooling'),
    type='ImageClassifier')
optim_wrapper = dict(
    optimizer=dict(lr=0.0001, type='AdamW', weight_decay=0.05))
param_scheduler = [
    dict(by_epoch=True, gamma=0.1, milestones=[
        15,
        25,
    ], type='MultiStepLR'),
]
randomness = dict(deterministic=False, seed=None)
resume = False
test_cfg = dict()
test_dataloader = dict(
    batch_size=32,
    collate_fn=dict(type='default_collate'),
    dataset=dict(
        ann_file='meta/val.txt',
        data_prefix='val',
        data_root='data/imagenet',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(edge='short', scale=256, type='ResizeEdge'),
            dict(crop_size=224, type='CenterCrop'),
            dict(type='PackClsInputs'),
        ],
        type='ImageNet'),
    num_workers=5,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(topk=(1, ), type='Accuracy')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(edge='short', scale=256, type='ResizeEdge'),
    dict(crop_size=224, type='CenterCrop'),
    dict(type='PackClsInputs'),
]
train_cfg = dict(by_epoch=True, max_epochs=30, val_interval=1)
train_dataloader = dict(
    batch_size=32,
    collate_fn=dict(type='default_collate'),
    dataset=dict(
        ann_file='train.txt',
        classes='classes.txt',
        data_prefix='train/',
        data_root='../data/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(scale=224, type='RandomResizedCrop'),
            dict(direction='horizontal', prob=0.5, type='RandomFlip'),
            dict(type='PackClsInputs'),
        ],
        type='ImageNet'),
    num_workers=5,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(scale=224, type='RandomResizedCrop'),
    dict(direction='horizontal', prob=0.5, type='RandomFlip'),
    dict(type='PackClsInputs'),
]
val_cfg = dict()
val_dataloader = dict(
    batch_size=32,
    collate_fn=dict(type='default_collate'),
    dataset=dict(
        ann_file='val.txt',
        classes='classes.txt',
        data_prefix='val/',
        data_root='../data/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(edge='short', scale=256, type='ResizeEdge'),
            dict(crop_size=224, type='CenterCrop'),
            dict(type='PackClsInputs'),
        ],
        type='ImageNet'),
    num_workers=5,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(topk=(1, ), type='Accuracy')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    type='ClsVisualizer', vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../Ex1/work_dir/'

2025/05/14 09:40:10 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/14 09:40:10 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([5, 2048]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 
2025/05/14 09:40:11 - mmengine - INFO - Load checkpoint from ../models/resnet50_8xb32_in1k_20210831-ea4938fc.pth
2025/05/14 09:40:11 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/14 09:40:11 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/14 09:40:11 - mmengine - INFO - Checkpoints will be saved to ../Ex1/work_dir.
2025/05/14 09:40:19 - mmengine - INFO - Exp name: my_config_20250514_094005
2025/05/14 09:40:19 - mmengine - INFO - Epoch(train)  [1][72/72]  lr: 1.0000e-04  eta: 0:03:59  time: 0.0665  data_time: 0.0004  memory: 3056  loss: 0.2658
2025/05/14 09:40:20 - mmengine - INFO - Epoch(val) [1][18/18]    accuracy/top1: 92.3077  data_time: 0.0494  time: 0.0705
2025/05/14 09:40:21 - mmengine - INFO - The best checkpoint with 92.3077 accuracy/top1 at 1 epoch is saved to best_accuracy_top1_epoch_1.pth.
2025/05/14 09:40:27 - mmengine - INFO - Exp name: my_config_20250514_094005
2025/05/14 09:40:27 - mmengine - INFO - Epoch(train)  [2][72/72]  lr: 1.0000e-04  eta: 0:03:16  time: 0.0656  data_time: 0.0004  memory: 3056  loss: 0.2761
2025/05/14 09:40:28 - mmengine - INFO - Epoch(val) [2][18/18]    accuracy/top1: 94.5804  data_time: 0.0193  time: 0.0411
2025/05/14 09:40:28 - mmengine - INFO - The previous best checkpoint ../Ex1/work_dir/best_accuracy_top1_epoch_1.pth is removed
2025/05/14 09:40:29 - mmengine - INFO - The best checkpoint with 94.5804 accuracy/top1 at 2 epoch is saved to best_accuracy_top1_epoch_2.pth.
2025/05/14 09:40:34 - mmengine - INFO - Exp name: my_config_20250514_094005
2025/05/14 09:40:34 - mmengine - INFO - Epoch(train)  [3][72/72]  lr: 1.0000e-04  eta: 0:02:59  time: 0.0649  data_time: 0.0004  memory: 3056  loss: 0.2905
2025/05/14 09:40:35 - mmengine - INFO - Epoch(val) [3][18/18]    accuracy/top1: 95.8042  data_time: 0.0194  time: 0.0409
2025/05/14 09:40:35 - mmengine - INFO - The previous best checkpoint ../Ex1/work_dir/best_accuracy_top1_epoch_2.pth is removed
2025/05/14 09:40:36 - mmengine - INFO - The best checkpoint with 95.8042 accuracy/top1 at 3 epoch is saved to best_accuracy_top1_epoch_3.pth.
2025/05/14 09:40:42 - mmengine - INFO - Exp name: my_config_20250514_094005
2025/05/14 09:40:42 - mmengine - INFO - Epoch(train)  [4][72/72]  lr: 1.0000e-04  eta: 0:02:47  time: 0.0646  data_time: 0.0004  memory: 3056  loss: 0.3227
2025/05/14 09:40:43 - mmengine - INFO - Epoch(val) [4][18/18]    accuracy/top1: 95.1049  data_time: 0.0199  time: 0.0396
2025/05/14 09:40:49 - mmengine - INFO - Exp name: my_config_20250514_094005
2025/05/14 09:40:49 - mmengine - INFO - Epoch(train)  [5][72/72]  lr: 1.0000e-04  eta: 0:02:37  time: 0.0660  data_time: 0.0006  memory: 3056  loss: 0.3460
2025/05/14 09:40:49 - mmengine - INFO - Epoch(val) [5][18/18]    accuracy/top1: 95.1049  data_time: 0.0205  time: 0.0423
2025/05/14 09:40:55 - mmengine - INFO - Exp name: my_config_20250514_094005
2025/05/14 09:40:55 - mmengine - INFO - Epoch(train)  [6][72/72]  lr: 1.0000e-04  eta: 0:02:29  time: 0.0653  data_time: 0.0004  memory: 3056  loss: 0.1880
2025/05/14 09:40:56 - mmengine - INFO - Epoch(val) [6][18/18]    accuracy/top1: 94.9301  data_time: 0.0199  time: 0.0393
2025/05/14 09:41:02 - mmengine - INFO - Exp name: my_config_20250514_094005
2025/05/14 09:41:02 - mmengine - INFO - Epoch(train)  [7][72/72]  lr: 1.0000e-04  eta: 0:02:21  time: 0.0649  data_time: 0.0004  memory: 3056  loss: 0.1816
2025/05/14 09:41:03 - mmengine - INFO - Epoch(val) [7][18/18]    accuracy/top1: 94.9301  data_time: 0.0232  time: 0.0439
2025/05/14 09:41:08 - mmengine - INFO - Exp name: my_config_20250514_094005
2025/05/14 09:41:08 - mmengine - INFO - Epoch(train)  [8][72/72]  lr: 1.0000e-04  eta: 0:02:14  time: 0.0659  data_time: 0.0004  memory: 3056  loss: 0.1141
2025/05/14 09:41:09 - mmengine - INFO - Epoch(val) [8][18/18]    accuracy/top1: 95.9790  data_time: 0.0200  time: 0.0404
2025/05/14 09:41:09 - mmengine - INFO - The previous best checkpoint ../Ex1/work_dir/best_accuracy_top1_epoch_3.pth is removed
2025/05/14 09:41:10 - mmengine - INFO - The best checkpoint with 95.9790 accuracy/top1 at 8 epoch is saved to best_accuracy_top1_epoch_8.pth.
2025/05/14 09:41:16 - mmengine - INFO - Exp name: my_config_20250514_094005
2025/05/14 09:41:16 - mmengine - INFO - Epoch(train)  [9][72/72]  lr: 1.0000e-04  eta: 0:02:08  time: 0.0746  data_time: 0.0004  memory: 3056  loss: 0.1271
2025/05/14 09:41:17 - mmengine - INFO - Epoch(val) [9][18/18]    accuracy/top1: 94.9301  data_time: 0.0190  time: 0.0402
2025/05/14 09:41:23 - mmengine - INFO - Exp name: my_config_20250514_094005
2025/05/14 09:41:23 - mmengine - INFO - Epoch(train) [10][72/72]  lr: 1.0000e-04  eta: 0:02:01  time: 0.0658  data_time: 0.0004  memory: 3056  loss: 0.1593
2025/05/14 09:41:23 - mmengine - INFO - Epoch(val) [10][18/18]    accuracy/top1: 94.5804  data_time: 0.0212  time: 0.0418
2025/05/14 09:41:29 - mmengine - INFO - Exp name: my_config_20250514_094005
2025/05/14 09:41:29 - mmengine - INFO - Epoch(train) [11][72/72]  lr: 1.0000e-04  eta: 0:01:55  time: 0.0750  data_time: 0.0004  memory: 3056  loss: 0.1519
2025/05/14 09:41:30 - mmengine - INFO - Epoch(val) [11][18/18]    accuracy/top1: 96.6783  data_time: 0.0196  time: 0.0418
2025/05/14 09:41:30 - mmengine - INFO - The previous best checkpoint ../Ex1/work_dir/best_accuracy_top1_epoch_8.pth is removed
2025/05/14 09:41:31 - mmengine - INFO - The best checkpoint with 96.6783 accuracy/top1 at 11 epoch is saved to best_accuracy_top1_epoch_11.pth.
2025/05/14 09:41:37 - mmengine - INFO - Exp name: my_config_20250514_094005
2025/05/14 09:41:37 - mmengine - INFO - Epoch(train) [12][72/72]  lr: 1.0000e-04  eta: 0:01:49  time: 0.0645  data_time: 0.0004  memory: 3056  loss: 0.2888
2025/05/14 09:41:38 - mmengine - INFO - Epoch(val) [12][18/18]    accuracy/top1: 96.8531  data_time: 0.0190  time: 0.0462
2025/05/14 09:41:38 - mmengine - INFO - The previous best checkpoint ../Ex1/work_dir/best_accuracy_top1_epoch_11.pth is removed
2025/05/14 09:41:38 - mmengine - INFO - The best checkpoint with 96.8531 accuracy/top1 at 12 epoch is saved to best_accuracy_top1_epoch_12.pth.
2025/05/14 09:41:45 - mmengine - INFO - Exp name: my_config_20250514_094005
2025/05/14 09:41:45 - mmengine - INFO - Epoch(train) [13][72/72]  lr: 1.0000e-04  eta: 0:01:43  time: 0.0753  data_time: 0.0004  memory: 3056  loss: 0.0767
2025/05/14 09:41:45 - mmengine - INFO - Epoch(val) [13][18/18]    accuracy/top1: 96.5035  data_time: 0.0194  time: 0.0421
2025/05/14 09:41:51 - mmengine - INFO - Exp name: my_config_20250514_094005
2025/05/14 09:41:51 - mmengine - INFO - Exp name: my_config_20250514_094005
2025/05/14 09:41:51 - mmengine - INFO - Epoch(train) [14][72/72]  lr: 1.0000e-04  eta: 0:01:36  time: 0.0652  data_time: 0.0004  memory: 3056  loss: 0.2444
2025/05/14 09:41:52 - mmengine - INFO - Epoch(val) [14][18/18]    accuracy/top1: 96.1538  data_time: 0.0193  time: 0.0401
2025/05/14 09:41:58 - mmengine - INFO - Exp name: my_config_20250514_094005
2025/05/14 09:41:58 - mmengine - INFO - Epoch(train) [15][72/72]  lr: 1.0000e-04  eta: 0:01:30  time: 0.0651  data_time: 0.0004  memory: 3056  loss: 0.2739
2025/05/14 09:41:59 - mmengine - INFO - Epoch(val) [15][18/18]    accuracy/top1: 94.4056  data_time: 0.0219  time: 0.0430
2025/05/14 09:42:05 - mmengine - INFO - Exp name: my_config_20250514_094005
2025/05/14 09:42:05 - mmengine - INFO - Epoch(train) [16][72/72]  lr: 1.0000e-05  eta: 0:01:24  time: 0.0655  data_time: 0.0007  memory: 3056  loss: 0.1062
2025/05/14 09:42:05 - mmengine - INFO - Epoch(val) [16][18/18]    accuracy/top1: 96.5035  data_time: 0.0198  time: 0.0403
2025/05/14 09:42:11 - mmengine - INFO - Exp name: my_config_20250514_094005
2025/05/14 09:42:11 - mmengine - INFO - Epoch(train) [17][72/72]  lr: 1.0000e-05  eta: 0:01:18  time: 0.0658  data_time: 0.0004  memory: 3056  loss: 0.0857
2025/05/14 09:42:12 - mmengine - INFO - Epoch(val) [17][18/18]    accuracy/top1: 96.3287  data_time: 0.0190  time: 0.0392
2025/05/14 09:42:18 - mmengine - INFO - Exp name: my_config_20250514_094005
2025/05/14 09:42:18 - mmengine - INFO - Epoch(train) [18][72/72]  lr: 1.0000e-05  eta: 0:01:12  time: 0.0641  data_time: 0.0004  memory: 3056  loss: 0.0643
2025/05/14 09:42:19 - mmengine - INFO - Epoch(val) [18][18/18]    accuracy/top1: 96.3287  data_time: 0.0198  time: 0.0412
2025/05/14 09:42:25 - mmengine - INFO - Exp name: my_config_20250514_094005
2025/05/14 09:42:25 - mmengine - INFO - Epoch(train) [19][72/72]  lr: 1.0000e-05  eta: 0:01:06  time: 0.0648  data_time: 0.0004  memory: 3056  loss: 0.1908
2025/05/14 09:42:25 - mmengine - INFO - Epoch(val) [19][18/18]    accuracy/top1: 95.9790  data_time: 0.0200  time: 0.0404
2025/05/14 09:42:31 - mmengine - INFO - Exp name: my_config_20250514_094005
2025/05/14 09:42:31 - mmengine - INFO - Epoch(train) [20][72/72]  lr: 1.0000e-05  eta: 0:00:59  time: 0.0646  data_time: 0.0004  memory: 3056  loss: 0.0463
2025/05/14 09:42:32 - mmengine - INFO - Epoch(val) [20][18/18]    accuracy/top1: 96.8531  data_time: 0.0211  time: 0.0450
2025/05/14 09:42:38 - mmengine - INFO - Exp name: my_config_20250514_094005
2025/05/14 09:42:38 - mmengine - INFO - Epoch(train) [21][72/72]  lr: 1.0000e-05  eta: 0:00:53  time: 0.0651  data_time: 0.0004  memory: 3056  loss: 0.1222
2025/05/14 09:42:38 - mmengine - INFO - Epoch(val) [21][18/18]    accuracy/top1: 96.6783  data_time: 0.0191  time: 0.0396
2025/05/14 09:42:43 - mmengine - INFO - Exp name: my_config_20250514_094005
2025/05/14 09:42:43 - mmengine - INFO - Epoch(train) [22][72/72]  lr: 1.0000e-05  eta: 0:00:47  time: 0.0481  data_time: 0.0003  memory: 3056  loss: 0.5212
2025/05/14 09:42:44 - mmengine - INFO - Epoch(val) [22][18/18]    accuracy/top1: 96.5035  data_time: 0.0221  time: 0.0417
2025/05/14 09:42:48 - mmengine - INFO - Exp name: my_config_20250514_094005
2025/05/14 09:42:48 - mmengine - INFO - Epoch(train) [23][72/72]  lr: 1.0000e-05  eta: 0:00:40  time: 0.0534  data_time: 0.0004  memory: 3056  loss: 0.0662
2025/05/14 09:42:49 - mmengine - INFO - Epoch(val) [23][18/18]    accuracy/top1: 96.1538  data_time: 0.0183  time: 0.0383
2025/05/14 09:42:54 - mmengine - INFO - Exp name: my_config_20250514_094005
2025/05/14 09:42:54 - mmengine - INFO - Epoch(train) [24][72/72]  lr: 1.0000e-05  eta: 0:00:34  time: 0.0479  data_time: 0.0003  memory: 3056  loss: 0.0643
2025/05/14 09:42:55 - mmengine - INFO - Epoch(val) [24][18/18]    accuracy/top1: 96.8531  data_time: 0.0189  time: 0.0420
2025/05/14 09:42:59 - mmengine - INFO - Exp name: my_config_20250514_094005
2025/05/14 09:42:59 - mmengine - INFO - Epoch(train) [25][72/72]  lr: 1.0000e-05  eta: 0:00:28  time: 0.0499  data_time: 0.0003  memory: 3056  loss: 0.1537
2025/05/14 09:43:00 - mmengine - INFO - Epoch(val) [25][18/18]    accuracy/top1: 96.8531  data_time: 0.0214  time: 0.0415
2025/05/14 09:43:04 - mmengine - INFO - Exp name: my_config_20250514_094005
2025/05/14 09:43:04 - mmengine - INFO - Epoch(train) [26][72/72]  lr: 1.0000e-06  eta: 0:00:22  time: 0.0482  data_time: 0.0003  memory: 3056  loss: 0.0413
2025/05/14 09:43:05 - mmengine - INFO - Epoch(val) [26][18/18]    accuracy/top1: 96.6783  data_time: 0.0209  time: 0.0407
2025/05/14 09:43:09 - mmengine - INFO - Exp name: my_config_20250514_094005
2025/05/14 09:43:09 - mmengine - INFO - Epoch(train) [27][72/72]  lr: 1.0000e-06  eta: 0:00:16  time: 0.0482  data_time: 0.0003  memory: 3056  loss: 0.1031
2025/05/14 09:43:10 - mmengine - INFO - Epoch(val) [27][18/18]    accuracy/top1: 97.0280  data_time: 0.0165  time: 0.0380
2025/05/14 09:43:10 - mmengine - INFO - The previous best checkpoint ../Ex1/work_dir/best_accuracy_top1_epoch_12.pth is removed
2025/05/14 09:43:11 - mmengine - INFO - The best checkpoint with 97.0280 accuracy/top1 at 27 epoch is saved to best_accuracy_top1_epoch_27.pth.
2025/05/14 09:43:14 - mmengine - INFO - Exp name: my_config_20250514_094005
2025/05/14 09:43:15 - mmengine - INFO - Exp name: my_config_20250514_094005
2025/05/14 09:43:15 - mmengine - INFO - Epoch(train) [28][72/72]  lr: 1.0000e-06  eta: 0:00:11  time: 0.0478  data_time: 0.0003  memory: 3056  loss: 0.0524
2025/05/14 09:43:16 - mmengine - INFO - Epoch(val) [28][18/18]    accuracy/top1: 96.6783  data_time: 0.0188  time: 0.0412
2025/05/14 09:43:20 - mmengine - INFO - Exp name: my_config_20250514_094005
2025/05/14 09:43:20 - mmengine - INFO - Epoch(train) [29][72/72]  lr: 1.0000e-06  eta: 0:00:05  time: 0.0538  data_time: 0.0004  memory: 3056  loss: 0.1922
2025/05/14 09:43:21 - mmengine - INFO - Epoch(val) [29][18/18]    accuracy/top1: 96.5035  data_time: 0.0184  time: 0.0405
2025/05/14 09:43:26 - mmengine - INFO - Exp name: my_config_20250514_094005
2025/05/14 09:43:26 - mmengine - INFO - Epoch(train) [30][72/72]  lr: 1.0000e-06  eta: 0:00:00  time: 0.0544  data_time: 0.0005  memory: 3056  loss: 0.0621
2025/05/14 09:43:26 - mmengine - INFO - Epoch(val) [30][18/18]    accuracy/top1: 96.6783  data_time: 0.0185  time: 0.0399
